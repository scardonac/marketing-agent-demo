"""
Setup script for AWS Bedrock Athena Agent Demo
This script helps you configure your AWS credentials and agent information.
"""

import os
import sys

def setup_config():
    """Interactive setup for creating config.py file."""
    print("üöÄ AWS Bedrock Athena Agent Demo Setup")
    print("=" * 50)
    print()
    
    # Check if config.py already exists
    if os.path.exists('config.py'):
        overwrite = input("config.py already exists. Overwrite? (y/N): ").lower()
        if overwrite != 'y':
            print("Setup cancelled.")
            return
    
    print("Please enter your AWS configuration details:")
    print("(Press Enter to skip optional fields)")
    print()
    
    # Collect configuration
    agent_id = input("Bedrock Agent ID (required): ").strip()
    if not agent_id:
        print("‚ùå Agent ID is required!")
        return
    
    agent_alias_id = input("Agent Alias ID [TSTALIASID]: ").strip() or "TSTALIASID"
    aws_region = input("AWS Region [us-east-1]: ").strip() or "us-east-1"
    
    print("\nAWS Credentials (optional - leave empty to use default AWS profile):")
    access_key = input("AWS Access Key ID: ").strip()
    secret_key = input("AWS Secret Access Key: ").strip()
    
    # Create config.py content
    config_content = f'''# AWS Configuration for Bedrock Athena Agent Demo
# Generated by setup.py

# AWS Credentials (optional - using default AWS profile if empty)
AWS_ACCESS_KEY_ID = "{access_key}"
AWS_SECRET_ACCESS_KEY = "{secret_key}"

# AWS Region
AWS_REGION = "{aws_region}"

# Bedrock Agent Configuration
BEDROCK_AGENT_ID = "{agent_id}"
BEDROCK_AGENT_ALIAS_ID = "{agent_alias_id}"

# Application Settings
DEBUG_MODE = False
MAX_CHAT_HISTORY = 50
'''
    
    # Write config file
    try:
        with open('config.py', 'w') as f:
            f.write(config_content)
        
        print("\n‚úÖ Configuration saved to config.py")
        print("\nNext steps:")
        print("1. Install dependencies: pip install -r requirements.txt")
        print("2. Run the app: streamlit run app.py")
        print("3. Open your browser to the displayed URL")
        
    except Exception as e:
        print(f"‚ùå Error saving configuration: {e}")

def setup_env_vars():
    """Show how to set environment variables."""
    print("\nüîß Setting Environment Variables")
    print("=" * 40)
    print("\nFor PowerShell (Windows):")
    print("$env:BEDROCK_AGENT_ID='your-agent-id'")
    print("$env:BEDROCK_AGENT_ALIAS_ID='TSTALIASID'")
    print("$env:AWS_DEFAULT_REGION='us-east-1'")
    print("$env:AWS_ACCESS_KEY_ID='your-access-key'")
    print("$env:AWS_SECRET_ACCESS_KEY='your-secret-key'")
    
    print("\nFor Command Prompt (Windows):")
    print("set BEDROCK_AGENT_ID=your-agent-id")
    print("set BEDROCK_AGENT_ALIAS_ID=TSTALIASID")
    print("set AWS_DEFAULT_REGION=us-east-1")
    print("set AWS_ACCESS_KEY_ID=your-access-key")
    print("set AWS_SECRET_ACCESS_KEY=your-secret-key")
    
    print("\nFor Linux/Mac:")
    print("export BEDROCK_AGENT_ID='your-agent-id'")
    print("export BEDROCK_AGENT_ALIAS_ID='TSTALIASID'")
    print("export AWS_DEFAULT_REGION='us-east-1'")
    print("export AWS_ACCESS_KEY_ID='your-access-key'")
    print("export AWS_SECRET_ACCESS_KEY='your-secret-key'")

def main():
    """Main setup function."""
    print("Choose setup method:")
    print("1. Create config.py file (recommended)")
    print("2. Show environment variable setup")
    print("3. Exit")
    
    choice = input("\nEnter your choice (1-3): ").strip()
    
    if choice == '1':
        setup_config()
    elif choice == '2':
        setup_env_vars()
    elif choice == '3':
        print("Setup cancelled.")
    else:
        print("Invalid choice. Please run the script again.")

if __name__ == "__main__":
    main()